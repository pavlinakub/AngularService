{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"./logging.sesrvice\";\nexport class AccountsService {\n  constructor(loggingService) {\n    this.loggingService = loggingService;\n    this.accounts = [{\n      name: 'Master Account',\n      status: 'active'\n    }, {\n      name: 'Testaccount',\n      status: 'inactive'\n    }, {\n      name: 'Hidden Account',\n      status: 'unknown'\n    }];\n  }\n  addAccount(name, status) {\n    this.accounts.push({\n      name: name,\n      status: status\n    });\n    this.loggingService.logStatusChange(status);\n  }\n  updateStatus(id, status) {\n    this.accounts[id].status = status;\n    this.loggingService.logStatusChange(status);\n  }\n  static #_ = this.ɵfac = function AccountsService_Factory(t) {\n    return new (t || AccountsService)(i0.ɵɵinject(i1.LoggingService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AccountsService,\n    factory: AccountsService.ɵfac\n  });\n}","map":{"version":3,"names":["AccountsService","constructor","loggingService","accounts","name","status","addAccount","push","logStatusChange","updateStatus","id","_","i0","ɵɵinject","i1","LoggingService","_2","factory","ɵfac"],"sources":["C:\\Users\\Honza\\Desktop\\Prace Paja\\angular\\skripta k angularu\\service-basic\\service-basic\\src\\app\\accounts.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { LoggingService } from './logging.sesrvice';\r\n\r\n@Injectable() //musim dat do service kam chci injected dalsi service\r\nexport class AccountsService {\r\n  [x: string]: any;\r\n  accounts = [\r\n    {\r\n      name: 'Master Account',\r\n      status: 'active',\r\n    },\r\n    {\r\n      name: 'Testaccount',\r\n      status: 'inactive',\r\n    },\r\n    {\r\n      name: 'Hidden Account',\r\n      status: 'unknown',\r\n    },\r\n  ];\r\n  constructor(private loggingService: LoggingService) {}\r\n  addAccount(name: string, status: string) {\r\n    this.accounts.push({ name: name, status: status });\r\n    this.loggingService.logStatusChange(status);\r\n  }\r\n  updateStatus(id: number, status: string) {\r\n    this.accounts[id].status = status;\r\n    this.loggingService.logStatusChange(status);\r\n  }\r\n}\r\n"],"mappings":";;AAIA,OAAM,MAAOA,eAAe;EAgB1BC,YAAoBC,cAA8B;IAA9B,KAAAA,cAAc,GAAdA,cAAc;IAdlC,KAAAC,QAAQ,GAAG,CACT;MACEC,IAAI,EAAE,gBAAgB;MACtBC,MAAM,EAAE;KACT,EACD;MACED,IAAI,EAAE,aAAa;MACnBC,MAAM,EAAE;KACT,EACD;MACED,IAAI,EAAE,gBAAgB;MACtBC,MAAM,EAAE;KACT,CACF;EACoD;EACrDC,UAAUA,CAACF,IAAY,EAAEC,MAAc;IACrC,IAAI,CAACF,QAAQ,CAACI,IAAI,CAAC;MAAEH,IAAI,EAAEA,IAAI;MAAEC,MAAM,EAAEA;IAAM,CAAE,CAAC;IAClD,IAAI,CAACH,cAAc,CAACM,eAAe,CAACH,MAAM,CAAC;EAC7C;EACAI,YAAYA,CAACC,EAAU,EAAEL,MAAc;IACrC,IAAI,CAACF,QAAQ,CAACO,EAAE,CAAC,CAACL,MAAM,GAAGA,MAAM;IACjC,IAAI,CAACH,cAAc,CAACM,eAAe,CAACH,MAAM,CAAC;EAC7C;EAAC,QAAAM,CAAA,G;qBAxBUX,eAAe,EAAAY,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,cAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAfhB,eAAe;IAAAiB,OAAA,EAAfjB,eAAe,CAAAkB;EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}